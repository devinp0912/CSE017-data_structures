public class LinkedList<E>{

    //data members
    private Node head;
    private Node tail;
    private int size;

    //constructor
    public LinkedList(){
        head = tail = null;
        size = 0;
    }

    //methods
    public boolean addFirst(E item){
        Node newNode= new Node(item);
        if (head == null){
            head = tail = newNode;
        }else{
            newNode.next = head;
            haed = newNode;
        }
        size++;
    }
    public boolean addLast(E item) {
        Node newNode = new Node(item);
        if(head == null){
            head = tail = newNode;
        }else{
            tail.next = newNode;
            tail = newNode;
        }
        size++;
    }
    //retrieving an item from the list
    public E getFirst(){
        if(head == null){
            throw new NoSuchElementException();
        }
        return head.value;
    }
    public E getLast(){
        if(head == null){
            throw new NoSuchElementException();
        }
        return head.value;
    }
    //removing an item from the list
    public boolean removeFirst(){
        if(head == null){
            throw new NoSuchElementException();
        }
        head = head.next;
        if(head == null){
            tail = null;
        }
        size--;
        return true;
    }
    public boolean removeLast(){
        if (head == null){
            throw new NoSuchElementException();
        }
        if(size == 1){
            return removeFirst();
        }
        Node current = head;
        Node previous = null;
        while(current.next != null){
            previous = current;
            current = current.next;
        }
        previous.next = null;
        tail = previous;
        size--;
        return true;
    }
    public boolean add(E item){
        return addFirst(item);
    }
    //clear, check if empty, and size
    public void clear(){
        head = tail = null;
        size = 0;
    }
    public boolean isEmpty(){
        return (size == 0);
    }
    public int size(){
        return size;
    }
    //toString()
    public String toString(){
        String output = "[";
        Node node = head;
        while(node != null){
            output += node.value + " ";
            node = node.next;
        }
        output += "]";
        return output;
    }
    //generating an interator for the list
    public Iterator<E> iterator(){
        return new linkedListIterator();
    }



    public class Node{

        //data members
        public E value;
        public Node next;

        //constructor
        public Node(E initialValue){
            value = initialValue;
            next = null;
        }
    }


    public class LinkedListIterator implements Iterator<E>{

        //data members
        public E current = head;

        //methods
        public boolean hasNext(){
            return (current != null);
        }
        public E next(){
            if(current == null){
                throw new NoSuchElementException();
            }
            E value = current.value;
            current = current.next;
            return value;
        }
    }
}